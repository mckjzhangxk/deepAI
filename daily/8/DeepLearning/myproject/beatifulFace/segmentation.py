__author__ = 'mathai'
import time
from faceDection import *
import  cv2
import  numpy as np



def findBestJawRegine(faceimg,rect,filterBox,iterCount=10):

    mask = np.zeros(faceimg.shape[:2], dtype="uint8")

    fgModel = np.zeros((1, 65), dtype="float")
    bgModel = np.zeros((1, 65), dtype="float")
    # apply GrabCut using the the bounding box segmentation method
    start = time.time()
    (mask, bgModel, fgModel) = cv2.grabCut(faceimg, mask, rect, bgModel,
        fgModel, iterCount=iterCount, mode=cv2.GC_INIT_WITH_RECT)
    end = time.time()
    print("[INFO] applying GrabCut took {:.2f} seconds".format(end - start))



    y,x=np.nonzero((mask == cv2.GC_FGD) | (mask == cv2.GC_PR_FGD))
    xmin,xmax,ymin,ymax=filterBox


    good_mask=np.bitwise_and(
        np.bitwise_and(y>ymin,y<ymax),
        np.bitwise_and(x>xmin,x<xmax)
    )
    return x[good_mask],y[good_mask]


if __name__ == '__main__':
    imgpath='data/face1.jpeg'
    faceimg,bbox,_=detectFace(imgpath)
    faceimg=cv2.cvtColor(faceimg,cv2.COLOR_RGB2BGR)

    rect = (bbox[0], bbox[1], bbox[0]+bbox[2], bbox[1]+bbox[3])

    xmin,xmax,ymin,ymax=154,560,428,684
    x,y=findBestJawRegine(faceimg,rect,(xmin,xmax,ymin,ymax))


    outputMask = np.zeros((faceimg.shape[0],faceimg.shape[1])).astype("uint8")
    outputMask[y,x]=255


    # # apply a bitwise AND to the image using our mask generated by
    # # GrabCut to generate our final output image
    #
    outputMask = cv2.morphologyEx(outputMask, cv2.MORPH_CLOSE, np.ones((50,50)))
    #
    output = cv2.bitwise_and(faceimg, faceimg, mask=outputMask)
    #
    #
    cv2.imshow("GrabCut Mask", outputMask)
    cv2.imshow("GrabCut Output", output)
    # cv2.imshow("GrabCut Output",faceimg)
    #
    cv2.waitKey(0)